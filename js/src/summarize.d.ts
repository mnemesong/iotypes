export declare const allSummarizeNames: readonly ["min", "max", "count", "sum", "avg"];
export type SummarizeName = typeof allSummarizeNames[number];
export type SummarizeReq<T extends {}, K extends (keyof T & string), N extends string> = Record<N, [SummarizeName, K]>;
type MbString = string | undefined | null;
type MbNumber = number | undefined | null;
type MbBigint = bigint | undefined | null;
type MbBoolean = boolean | undefined | null;
export declare function summarizeMinMax<Vals extends MbString[] | MbNumber[] | MbBigint[] | MbBoolean[]>(vals: Vals, fn: "min" | "max"): Vals[number] | number | null;
export declare function summarizeCount<Vals extends MbNumber[] | MbBigint[] | MbBoolean[]>(vals: Vals): number;
export declare function summarizeSum<Vals extends MbNumber[] | MbBigint[] | MbBoolean[]>(vals: Vals): number;
export declare function summarizeAvg<Vals extends MbNumber[] | MbBigint[] | MbBoolean[]>(vals: Vals): number;
export type SummarizeValsResult<Fn> = Fn extends "count" ? number : (Fn extends ("sum" | "avg") ? number : string | boolean | number | null);
export declare function summarizeVals<Vals extends MbNumber[] | MbBigint[] | MbBoolean[] | MbString[], Fn extends SummarizeName>(vals: Vals, fn: Fn): SummarizeValsResult<Fn>;
export type SummarizeResult<T extends {}, K extends (keyof T & string), N extends string, Req extends SummarizeReq<T, K, N>> = Record<N, SummarizeValsResult<Req[N][0]>>;
export type SummarizeIO<T extends {}, K extends (keyof T & string), N extends string> = (req: SummarizeReq<T, K, N>) => Promise<SummarizeResult<T, K, N, typeof req>>;
export declare function summarizeArray<T extends {}, K extends (keyof T & string), N extends string>(arr: T[], dsl: SummarizeReq<T, K, N>): Record<N, SummarizeValsResult<typeof dsl[N][0]>>;
export declare function makeSummarizeIOArray<T extends {}, K extends (keyof T & string), N extends string>(arr: T[]): SummarizeIO<T, K, N>;
export {};
